pico-8 cartridge // http://www.pico-8.com
version 35
__lua__
-- main

function _init()
    -- player init
	p=make_player(3,3)
	cam=make_camera()

    zombies={}
    make_zombie(4,5)

    frict=0.9
end

function _draw()

    cls()
	
	map(0,0)
	
	--player
    p:draw()
    cam:draw()

    --zombie
	for zombie in all(zombies) do
		zombie:draw()
        enemy_collide(p, zombie)
	end

    --debug
	print(p.x,p.x*8-62,p.y*8-62,8)
	print(p.y,p.x*8-62,p.y*8-56,8)
	print(p.dx,p.x*8-62,p.y*8-50,8)
	print(p.dy,p.x*8-62,p.y*8-44,8)
end

function _update()
    p:control()
    p:update()
    
    cam:update(p.x, p.y)

    --zombie
	for zombie in all(zombies) do
		zombie:control(p)
		zombie:update(p)
	end
end
-->8
-- player and zombies

function make_player(x, y)
    -- everything is in a table
    -- units are in tiles, where each tile is 8x8 pixels
    pl={
        -- fields
        sp=1,
        x=x,
        y=y,
        w=0.45,
        h=0.45,
        dx=0,
        dy=0,
        max_dx=0.5,
        max_dy=0.5,
        accel=0.1,

        -- functions
        control=function(self)
            if btn(⬅️) then
                self.dx-=self.accel
            end
            if btn(➡️) then
                self.dx+=self.accel
            end
            if btn(⬆️) then
                self.dy-=self.accel
            end
            if btn(⬇️) then
                self.dy+=self.accel
            end

            -- ensures player doesnt exceed max dx or dy in any direction
            self.dx=mid(-self.max_dx, self.dx, self.max_dx)
			self.dy=mid(-self.max_dy, self.dy, self.max_dy)
        end,

        draw=function(self)
            spr(self.sp,(self.x*8)-4,(self.y*8)-4)
        end,

        update=function(self)
            -- wall collide
            if not solid_area(self.x+self.dx,self.y,self.w,self.h) then
                self.x+=self.dx
            else
                self.dx*=-0.5
                self.x+=self.dx
            end
					
            if not solid_area(self.x,self.y+self.dy,self.w,self.h) then
                self.y+=self.dy
            else
                self.dy=0
                self.y+=self.dy
            end

            self.dx*=frict
			self.dy*=frict
        end
    }

    return pl
end

function make_zombie(x, y)
    add(zombies,{
		sp=4,
		x=x,
		y=y,
		w=0.45,
		h=0.45,
		dx=0,
		dy=0,
		max_dx=0.1,
		max_dy=0.1,
		accel=0.1,
		
		control=function(self,a)
			if self.x > a.x+0.5 then
				self.dx-=self.accel
			elseif self.x < a.x-0.5 then
				self.dx+=self.accel
			else
				self.dx=0
			end
				
			if self.y > a.y+0.5 then
				self.dy-=self.accel
			elseif self.y < a.y-0.5 then
				self.dy+=self.accel
			else
				self.dy=0
			end
			
			self.dx=mid(-self.max_dx,self.dx,self.max_dx)
			self.dy=mid(-self.max_dy,self.dy,self.max_dy)
		end,
		
		update=function(self,a)
		    --map collide	
			if not solid_area(self.x+self.dx,self.y,self.w,self.h) then
				self.x+=self.dx
			else
				self.dx=0
			end
			
			if not solid_area(self.x,self.y+self.dy,self.w,self.h) then
				self.y+=self.dy
			else		
				self.dy=0
			end
		end,
		
		draw=function(self)
			spr(self.sp,(self.x*8)-4,(self.y*8)-4)
		end
		})
end

function make_camera()
	cam={
		cx=0,
		cy=0,
		
		update=function(self,x,y)
			self.cx=x*8-62
			self.cy=y*8-62
		end,
		
		draw=function(self)
			camera(self.cx,self.cy)
		end
		}
		
	return cam
end

-->8
-- enemy collisions
function enemy_collide(p, z)
    if detect_collide(p,z) then
        print("c", p.x, p.y, 8)
    end
end

function detect_collide(p, z)
    return ((((p.x <= z.x) and (z.x <= p.x+p.w+0.5)) and (((p.y <= z.y+z.h+0.5) and (z.y+z.h+0.5 <= p.y+p.h+0.5)) or ((z.y <= p.y+p.h+0.5) and (p.y+p.h+0.5 <= z.y+z.h+0.5)))) or 
             (((z.x <= p.x) and (p.x <= z.x+z.w+0.5)) and (((p.y <= z.y+z.h+0.5) and (z.y+z.h+0.5 <= p.y+p.h+0.5)) or ((z.y <= p.y+p.h+0.5) and (p.y+p.h+0.5 <= z.y+z.h+0.5)))))
end

-- wall collision
--cr: zep tutorial
function solid(x,y)
	return fget(mget(x,y),0)
end

function solid_area(x,y,w,h)
 return 
  solid(x-w,y-h) or
  solid(x+w,y-h) or
  solid(x-w,y+h) or
  solid(x+w,y+h)
end

__gfx__
00000000888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888886666666655555555bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0003000000000202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000030000000202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
